package com.horvat.gui.dialogs.doctor;

import com.horvat.bll.viewmodels.doctor.PrescribeMedicineViewModel;
import com.horvat.dl.entities.PrescribedMedicine;
import com.horvat.gui.app.Utils;
import com.horvat.gui.dialogs.base.BaseDialog;
import com.horvat.gui.dialogs.base.VMDialog;
import com.horvat.gui.dialogs.option.base.OptionDialog;
import javafx.util.Pair;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.stream.Collectors;

public class PrescribeMedicineDialog extends BaseDialog<PrescribedMedicine, PrescribeMedicineViewModel> {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel pnlButtons;
    private JPanel pnlMain;
    private JLabel lblQuantity;
    private JLabel lblMedicine;
    private JComboBox<String> ddlMedicine;
    private JSpinner txtQuantity;

    public PrescribeMedicineDialog(Window owner, String title, int width, int height, PrescribeMedicineViewModel viewModel) {
        super(owner, title, width, height, viewModel);

        $$$setupUI$$$();
        setContentPane(contentPane);

        initListeners();
        java.util.List<Pair<Integer, String>> medicines = viewModel.getMedicines();
        ddlMedicine.setModel(new DefaultComboBoxModel<>(medicines.stream().map(Pair::getValue).toArray(String[]::new)));
        txtQuantity.setModel(new SpinnerNumberModel(1.0, 1.0, 100.0, 1.0));
    }

    private void initListeners() {
        buttonOK.addActionListener(e -> onOK());

        buttonCancel.addActionListener(e -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(
                e -> onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }

    private void onOK() {
        viewModel.setQuantity((Double) txtQuantity.getValue());
        viewModel.setMedicineName((String) ddlMedicine.getSelectedItem());

        Utils.saveDataAndShowStatus(this, viewModel, "Please fill in all of the necessary fields",
                () -> setResultAndClose(viewModel.getMedicine())
        );
    }

    private void onCancel() {
        close();
    }

    private void createUIComponents() {
        pnlMain = new JPanel(new GridBagLayout());

        lblMedicine = new JLabel("Medicine");
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.weightx = 1;
        gbc.weighty = 1;
        gbc.gridx = 0;
        gbc.gridy = 0;
        //gbc.anchor = GridBagConstraints.EAST;

        pnlMain.add(lblMedicine, gbc);
        lblQuantity = new JLabel("Quantity:");
        gbc.gridy++;
        //gbc.anchor = GridBagConstraints.EAST;
        pnlMain.add(lblQuantity, gbc);

        txtQuantity = new JSpinner();
        gbc.gridx++;
        //gbc.anchor = GridBagConstraints.WEST;
        //gbc.fill = GridBagConstraints.HORIZONTAL;
        pnlMain.add(txtQuantity, gbc);

        ddlMedicine = new JComboBox<>();
        gbc.gridy--;
        //gbc.anchor = GridBagConstraints.WEST;
        pnlMain.add(ddlMedicine, gbc);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel1, gbc);
        pnlButtons = new JPanel();
        pnlButtons.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(pnlButtons, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("Prescribe");
        pnlButtons.add(buttonOK, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        pnlButtons.add(buttonCancel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(pnlMain, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
