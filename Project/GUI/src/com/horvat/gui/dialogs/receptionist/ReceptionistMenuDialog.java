package com.horvat.gui.dialogs.receptionist;

import com.horvat.bll.viewmodels.FillAppointmentViewModel;
import com.horvat.bll.viewmodels.receptionist.InsertPatientViewModel;
import com.horvat.bll.viewmodels.receptionist.IssueBillViewModel;
import com.horvat.bll.viewmodels.receptionist.ReceptionistMenuViewModel;
import com.horvat.dl.entities.Appointment;
import com.horvat.dl.entities.Bill;
import com.horvat.dl.entities.Doctor;
import com.horvat.dl.entities.Patient;
import com.horvat.gui.app.Utils;
import com.horvat.gui.dialogs.FillAppointmentDialog;
import com.horvat.gui.dialogs.base.VMDialog;
import com.horvat.gui.dialogs.option.ChooseDoctorDialog;
import com.horvat.gui.dialogs.option.ChoosePatientDialog;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ReceptionistMenuDialog extends VMDialog<ReceptionistMenuViewModel> {
    private JPanel contentPane;
    private JButton btnInsertPatient;
    private JButton btnMakeAppointment;
    private JButton btnIssueBill;
    private JCheckBox cbBasicRegistration;

    public ReceptionistMenuDialog(Window owner, String title, int width, int height, ReceptionistMenuViewModel viewModel) {
        super(owner, title, width, height, viewModel);
        setContentPane(contentPane);

        initListeners();
    }

    private void initListeners() {
        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        btnInsertPatient.addActionListener(e -> {
            boolean basic = cbBasicRegistration.isSelected();

            InsertPatientDialog insertPatientDialog = new InsertPatientDialog(
                    this, (basic ? "Basic" : "Full") + " registration",
                    900, 500, new InsertPatientViewModel(basic)
            );

            Patient patient = insertPatientDialog.showDialog();

            if (patient != null)
                viewModel.getPatients().add(patient);
        });

        btnMakeAppointment.addActionListener(e -> {
            ChooseDoctorDialog chooseDoctorDialog = new ChooseDoctorDialog(
                    this, "Choose doctor", viewModel.getDoctors()
            );
            Doctor doctor = chooseDoctorDialog.showDialog();

            if (doctor != null) {
                Patient patient = selectPatient();

                if (patient != null) {
                    FillAppointmentDialog fillAppointmentDialog = new FillAppointmentDialog(
                            this, "Make an appointment", 400, 400,
                            new FillAppointmentViewModel(doctor, patient)
                    );

                    Appointment appointment = fillAppointmentDialog.showDialog();

                    if (appointment != null)
                        patient.getAppointments().add(appointment);
                }
            }
        });

        btnIssueBill.addActionListener(e -> {
            Patient patient = selectPatient();

            if (patient != null) {
                IssueBillDialog issueBillDialog = new IssueBillDialog(
                        this, "Issue bill to " + patient.getBasicDetails().getName(),
                        400, 200, new IssueBillViewModel(patient)
                );

                Bill bill = issueBillDialog.showDialog();

                if (bill != null)
                    patient.getBills().add(bill);
            }
        });
    }

    private Patient selectPatient() {
        ChoosePatientDialog choosePatientDialog = new ChoosePatientDialog(
                this, "Choose patient", viewModel.getPatients()
        );

        return choosePatientDialog.showDialog();
    }

    private void onOK() {
        close();
    }

    private void onCancel() {
        close();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        btnInsertPatient = new JButton();
        btnInsertPatient.setText("Insert new patient");
        panel1.add(btnInsertPatient, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnMakeAppointment = new JButton();
        btnMakeAppointment.setText("Make an appointment");
        panel1.add(btnMakeAppointment, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnIssueBill = new JButton();
        btnIssueBill.setText("Issue bill");
        panel1.add(btnIssueBill, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cbBasicRegistration = new JCheckBox();
        cbBasicRegistration.setText("Basic registration");
        panel1.add(cbBasicRegistration, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
